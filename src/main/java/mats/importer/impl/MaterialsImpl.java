//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2004.11.02 at 10:24:27 GMT+02:00 
//


package mats.importer.impl;

public class MaterialsImpl implements mats.importer.Materials, com.sun.xml.bind.unmarshaller.UnmarshallableObject, com.sun.xml.bind.serializer.XMLSerializable, com.sun.xml.bind.validator.ValidatableObject
{

    protected com.sun.xml.bind.util.ListImpl _Material = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
    private final static com.sun.msv.grammar.Grammar schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize("\u00ac\u00ed\u0000\u0005sr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/grammar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0003I\u0000\u000ecachedHashCodeL\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0002xp\u0000-\u0018\u00d7ppsr\u0000 com.sun.msv.grammar.OneOrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003\u0000-\u0018\u00ccsr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv.grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000\fcontentModelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003\u0000-\u0018\u00c9q\u0000~\u0000\np\u0000sq\u0000~\u0000\u000b\u0000-\u0018\u00bepp\u0000sq\u0000~\u0000\u0000\u0000-\u0018\u00b3ppsq\u0000~\u0000\u0006\u0000-\u0018\u00a8q\u0000~\u0000\npsr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClassq\u0000~\u0000\fxq\u0000~\u0000\u0003\u0000-\u0018\u00a5q\u0000~\u0000\npsr\u00002com.sun.msv.grammar.Expression$AnyStringExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\bsq\u0000~\u0000\t\u0001psr\u0000 com.sun.msv.grammar.AnyNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\tq\u0000~\u0000\u0016psr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Ljava/lang/String;L\u0000\fnamespaceURIq\u0000~\u0000\u001dxq\u0000~\u0000\u0018t\u0000$mats.importer.Materials.MaterialTypet\u0000+http://java.sun.com/jaxb/xjc/dummy-elementssq\u0000~\u0000\u001ct\u0000\bmaterialt\u0000\u0000q\u0000~\u0000\u001bsr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0002\u0000\u0004I\u0000\u0005countI\u0000\tthresholdL\u0000\u0006parentq\u0000~\u0000%[\u0000\u0005tablet\u0000![Lcom/sun/msv/grammar/Expression;xp\u0000\u0000\u0000\u0004\u0000\u0000\u00009pur\u0000![Lcom.sun.msv.grammar.Expression;\u00d68D\u00c3]\u00ad\u00a7\n\u0002\u0000\u0000xp\u0000\u0000\u0000\u00bfpppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppq\u0000~\u0000\u0011ppppppppppq\u0000~\u0000\u0010ppppppppppppppppppppppppq\u0000~\u0000\bppppppppppq\u0000~\u0000\u0005pppppppppppppppppppppppppppppppppppppppppppppppppppppp");

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return mats.importer.Materials.class;
    }

    public java.util.List getMaterial() {
        return _Material;
    }

    public com.sun.xml.bind.unmarshaller.ContentHandlerEx getUnmarshaller(com.sun.xml.bind.unmarshaller.UnmarshallingContext context) {
        return new mats.importer.impl.MaterialsImpl.Unmarshaller(context);
    }

    public java.lang.Class getPrimaryInterfaceClass() {
        return PRIMARY_INTERFACE_CLASS();
    }

    public void serializeElements(com.sun.xml.bind.serializer.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = _Material.size();
        while (idx1 != len1) {
            if (_Material.get(idx1) instanceof javax.xml.bind.Element) {
                context.childAsElements(((com.sun.xml.bind.serializer.XMLSerializable) _Material.get(idx1 ++)));
            } else {
                context.startElement("", "material");
                int idx_0 = idx1;
                context.childAsAttributes(((com.sun.xml.bind.serializer.XMLSerializable) _Material.get(idx_0 ++)));
                context.endAttributes();
                context.childAsElements(((com.sun.xml.bind.serializer.XMLSerializable) _Material.get(idx1 ++)));
                context.endElement();
            }
        }
    }

    public void serializeAttributes(com.sun.xml.bind.serializer.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = _Material.size();
    }

    public void serializeAttributeBodies(com.sun.xml.bind.serializer.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = _Material.size();
    }

    public java.lang.Class getPrimaryInterface() {
        return (mats.importer.Materials.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public static class MaterialTypeImpl implements mats.importer.Materials.MaterialType, com.sun.xml.bind.unmarshaller.UnmarshallableObject, com.sun.xml.bind.serializer.XMLSerializable, com.sun.xml.bind.validator.ValidatableObject
    {

        protected java.lang.String _MatGroup;
        protected java.math.BigInteger _ColorRed;
        protected java.math.BigInteger _ColorBlue;
        protected java.math.BigInteger _ColorAlpha;
        protected java.math.BigInteger _GroupID;
        protected java.math.BigInteger _MatType;
        protected byte[] _MaterialImage;
        protected java.lang.String _OwnCode;
        protected java.lang.String _MatDesc;
        protected java.math.BigInteger _ColorGreen;
        protected java.lang.String _ItemCode;
        private final static com.sun.msv.grammar.Grammar schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize("\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/grammar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0003I\u0000\u000ecachedHashCodeL\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0002xp\u0006\u00b3\u00ef~ppsq\u0000~\u0000\u0000\u0005\u00d2\u00b1Wppsq\u0000~\u0000\u0000\u0005\u0087\u00cevppsq\u0000~\u0000\u0000\u0004\u00a6\u0090Oppsq\u0000~\u0000\u0000\u0003\u00c5R(ppsq\u0000~\u0000\u0000\u0002\u00e4\u0014\u0001ppsq\u0000~\u0000\u0000\u0002\u0002\u00d5\u00dappsq\u0000~\u0000\u0000\u0001\u00bao\u00ecppsq\u0000~\u0000\u0000\u0001r\t\u00feppsq\u0000~\u0000\u0000\u0000\u0090\u00cb\u00d7ppsr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv.grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000\fcontentModelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003\u0000He\u00e9pp\u0000sr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0003\u0000He\u00deppsr\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Ljava/lang/String;L\u0000\btypeNameq\u0000~\u0000\u001bL\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0006stringsr\u0000.com.sun.msv.datatype.xsd.WhiteSpaceProcessor$1\u0013JMoI\u00db\u00a4G\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com.sun.msv.grammar.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\nppsr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u001bL\u0000\fnamespaceURIq\u0000~\u0000\u001bxpq\u0000~\u0000\u001fq\u0000~\u0000\u001esr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u001bL\u0000\fnamespaceURIq\u0000~\u0000\u001bxr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\bitemCodet\u0000\u0000sq\u0000~\u0000\u000f\u0000He\u00e9pp\u0000q\u0000~\u0000\u0016sq\u0000~\u0000\'t\u0000\u0007ownCodeq\u0000~\u0000+sq\u0000~\u0000\u000f\u0000\u00e1>\"pp\u0000sq\u0000~\u0000\u0013\u0000\u00e1>\u0017ppsr\u0000$com.sun.msv.datatype.xsd.IntegerType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000+com.sun.msv.datatype.xsd.IntegerDerivedType\u0099\u00f1]\u0090&6k\u00be\u0002\u0000\u0000xq\u0000~\u0000\u0018q\u0000~\u0000\u001et\u0000\u0007integersr\u0000.com.sun.msv.datatype.xsd.WhiteSpaceProcessor$2\u0087z9\u00ee\u00f8,N\u0005\u0002\u0000\u0000xq\u0000~\u0000!q\u0000~\u0000$sq\u0000~\u0000%q\u0000~\u00004q\u0000~\u0000\u001esq\u0000~\u0000\'t\u0000\u0007matTypeq\u0000~\u0000+sq\u0000~\u0000\u000f\u0000He\u00e9pp\u0000q\u0000~\u0000\u0016sq\u0000~\u0000\'t\u0000\bmatGroupq\u0000~\u0000+sq\u0000~\u0000\u000f\u0000He\u00e9pp\u0000q\u0000~\u0000\u0016sq\u0000~\u0000\'t\u0000\u0007matDescq\u0000~\u0000+sq\u0000~\u0000\u000f\u0000\u00e1>\"pp\u0000q\u0000~\u00000sq\u0000~\u0000\'t\u0000\bcolorRedq\u0000~\u0000+sq\u0000~\u0000\u000f\u0000\u00e1>\"pp\u0000q\u0000~\u00000sq\u0000~\u0000\'t\u0000\ncolorGreenq\u0000~\u0000+sq\u0000~\u0000\u000f\u0000\u00e1>\"pp\u0000q\u0000~\u00000sq\u0000~\u0000\'t\u0000\tcolorBlueq\u0000~\u0000+sq\u0000~\u0000\u000f\u0000\u00e1>\"pp\u0000q\u0000~\u00000sq\u0000~\u0000\'t\u0000\ncolorAlphaq\u0000~\u0000+sq\u0000~\u0000\u000f\u0000J\u00e2\u00dcpp\u0000sq\u0000~\u0000\u0013\u0000J\u00e2\u00d1ppsr\u0000)com.sun.msv.datatype.xsd.Base64BinaryType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.BinaryBaseType\u00a7\u00ce\u000e\u0097^\u00afW\u0011\u0002\u0000\u0000xq\u0000~\u0000\u0018q\u0000~\u0000\u001et\u0000\fbase64Binaryq\u0000~\u00006q\u0000~\u0000$sq\u0000~\u0000%q\u0000~\u0000Qq\u0000~\u0000\u001esq\u0000~\u0000\'t\u0000\rmaterialImageq\u0000~\u0000+sq\u0000~\u0000\u000f\u0000\u00e1>\"pp\u0000q\u0000~\u00000sq\u0000~\u0000\'t\u0000\u0007groupIDq\u0000~\u0000+sr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0002\u0000\u0004I\u0000\u0005countI\u0000\tthresholdL\u0000\u0006parentq\u0000~\u0000Y[\u0000\u0005tablet\u0000![Lcom/sun/msv/grammar/Expression;xp\u0000\u0000\u0000\n\u0000\u0000\u00009pur\u0000![Lcom.sun.msv.grammar.Expression;\u00d68D\u00c3]\u00ad\u00a7\n\u0002\u0000\u0000xp\u0000\u0000\u0000\u00bfppppppppppppppppppppppq\u0000~\u0000\u0007q\u0000~\u0000\u0006pppppppppppppppppppppq\u0000~\u0000\fpppppppppppppppq\u0000~\u0000\tppppppppppppppppppppppppppppppppppppq\u0000~\u0000\u0005pq\u0000~\u0000\u000bppppq\u0000~\u0000\u000epppppppppppppppppppppppppppppppq\u0000~\u0000\bppppppppppppppppppppppppppppppppppppppq\u0000~\u0000\nppppq\u0000~\u0000\rppppppppp");

        private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
            return mats.importer.Materials.MaterialType.class;
        }

        public java.lang.String getMatGroup() {
            return _MatGroup;
        }

        public void setMatGroup(java.lang.String value) {
            _MatGroup = value;
        }

        public java.math.BigInteger getColorRed() {
            return _ColorRed;
        }

        public void setColorRed(java.math.BigInteger value) {
            _ColorRed = value;
        }

        public java.math.BigInteger getColorBlue() {
            return _ColorBlue;
        }

        public void setColorBlue(java.math.BigInteger value) {
            _ColorBlue = value;
        }

        public java.math.BigInteger getColorAlpha() {
            return _ColorAlpha;
        }

        public void setColorAlpha(java.math.BigInteger value) {
            _ColorAlpha = value;
        }

        public java.math.BigInteger getGroupID() {
            return _GroupID;
        }

        public void setGroupID(java.math.BigInteger value) {
            _GroupID = value;
        }

        public java.math.BigInteger getMatType() {
            return _MatType;
        }

        public void setMatType(java.math.BigInteger value) {
            _MatType = value;
        }

        public byte[] getMaterialImage() {
            return _MaterialImage;
        }

        public void setMaterialImage(byte[] value) {
            _MaterialImage = value;
        }

        public java.lang.String getOwnCode() {
            return _OwnCode;
        }

        public void setOwnCode(java.lang.String value) {
            _OwnCode = value;
        }

        public java.lang.String getMatDesc() {
            return _MatDesc;
        }

        public void setMatDesc(java.lang.String value) {
            _MatDesc = value;
        }

        public java.math.BigInteger getColorGreen() {
            return _ColorGreen;
        }

        public void setColorGreen(java.math.BigInteger value) {
            _ColorGreen = value;
        }

        public java.lang.String getItemCode() {
            return _ItemCode;
        }

        public void setItemCode(java.lang.String value) {
            _ItemCode = value;
        }

        public com.sun.xml.bind.unmarshaller.ContentHandlerEx getUnmarshaller(com.sun.xml.bind.unmarshaller.UnmarshallingContext context) {
            return new mats.importer.impl.MaterialsImpl.MaterialTypeImpl.Unmarshaller(context);
        }

        public java.lang.Class getPrimaryInterfaceClass() {
            return PRIMARY_INTERFACE_CLASS();
        }

        public void serializeElements(com.sun.xml.bind.serializer.XMLSerializer context)
            throws org.xml.sax.SAXException
        {
            context.startElement("", "itemCode");
            context.endAttributes();
            try {
                context.text(((java.lang.String) _ItemCode));
            } catch (java.lang.Exception e) {
                com.sun.xml.bind.marshaller.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
            context.startElement("", "ownCode");
            context.endAttributes();
            try {
                context.text(((java.lang.String) _OwnCode));
            } catch (java.lang.Exception e) {
                com.sun.xml.bind.marshaller.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
            context.startElement("", "matType");
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printInteger(((java.math.BigInteger) _MatType)));
            } catch (java.lang.Exception e) {
                com.sun.xml.bind.marshaller.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
            context.startElement("", "matGroup");
            context.endAttributes();
            try {
                context.text(((java.lang.String) _MatGroup));
            } catch (java.lang.Exception e) {
                com.sun.xml.bind.marshaller.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
            context.startElement("", "matDesc");
            context.endAttributes();
            try {
                context.text(((java.lang.String) _MatDesc));
            } catch (java.lang.Exception e) {
                com.sun.xml.bind.marshaller.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
            context.startElement("", "colorRed");
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printInteger(((java.math.BigInteger) _ColorRed)));
            } catch (java.lang.Exception e) {
                com.sun.xml.bind.marshaller.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
            context.startElement("", "colorGreen");
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printInteger(((java.math.BigInteger) _ColorGreen)));
            } catch (java.lang.Exception e) {
                com.sun.xml.bind.marshaller.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
            context.startElement("", "colorBlue");
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printInteger(((java.math.BigInteger) _ColorBlue)));
            } catch (java.lang.Exception e) {
                com.sun.xml.bind.marshaller.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
            context.startElement("", "colorAlpha");
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printInteger(((java.math.BigInteger) _ColorAlpha)));
            } catch (java.lang.Exception e) {
                com.sun.xml.bind.marshaller.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
            context.startElement("", "materialImage");
            context.endAttributes();
            try {
                context.text(com.sun.msv.datatype.xsd.Base64BinaryType.save(((byte[]) _MaterialImage)));
            } catch (java.lang.Exception e) {
                com.sun.xml.bind.marshaller.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
            context.startElement("", "groupID");
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printInteger(((java.math.BigInteger) _GroupID)));
            } catch (java.lang.Exception e) {
                com.sun.xml.bind.marshaller.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }

        public void serializeAttributes(com.sun.xml.bind.serializer.XMLSerializer context)
            throws org.xml.sax.SAXException
        {
        }

        public void serializeAttributeBodies(com.sun.xml.bind.serializer.XMLSerializer context)
            throws org.xml.sax.SAXException
        {
        }

        public java.lang.Class getPrimaryInterface() {
            return (mats.importer.Materials.MaterialType.class);
        }

        public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
            return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
        }

        public class Unmarshaller
            extends com.sun.xml.bind.unmarshaller.ContentHandlerEx
        {


            public Unmarshaller(com.sun.xml.bind.unmarshaller.UnmarshallingContext context) {
                super(context, "----------------------------------");
            }

            protected com.sun.xml.bind.unmarshaller.UnmarshallableObject owner() {
                return mats.importer.impl.MaterialsImpl.MaterialTypeImpl.this;
            }

            public void enterElement(java.lang.String ___uri, java.lang.String ___local, org.xml.sax.Attributes __atts)
                throws com.sun.xml.bind.unmarshaller.UnreportedException
            {
                switch (state) {
                    case  33 :
                        revertToParentFromEnterElement(___uri, ___local, __atts);
                        return ;
                    case  24 :
                        if (("" == ___uri)&&("colorAlpha" == ___local)) {
                            context.pushAttributes(__atts);
                            state = 25;
                            return ;
                        }
                        break;
                    case  9 :
                        if (("" == ___uri)&&("matGroup" == ___local)) {
                            context.pushAttributes(__atts);
                            state = 10;
                            return ;
                        }
                        break;
                    case  6 :
                        if (("" == ___uri)&&("matType" == ___local)) {
                            context.pushAttributes(__atts);
                            state = 7;
                            return ;
                        }
                        break;
                    case  18 :
                        if (("" == ___uri)&&("colorGreen" == ___local)) {
                            context.pushAttributes(__atts);
                            state = 19;
                            return ;
                        }
                        break;
                    case  30 :
                        if (("" == ___uri)&&("groupID" == ___local)) {
                            context.pushAttributes(__atts);
                            state = 31;
                            return ;
                        }
                        break;
                    case  0 :
                        if (("" == ___uri)&&("itemCode" == ___local)) {
                            context.pushAttributes(__atts);
                            state = 1;
                            return ;
                        }
                        break;
                    case  3 :
                        if (("" == ___uri)&&("ownCode" == ___local)) {
                            context.pushAttributes(__atts);
                            state = 4;
                            return ;
                        }
                        break;
                    case  21 :
                        if (("" == ___uri)&&("colorBlue" == ___local)) {
                            context.pushAttributes(__atts);
                            state = 22;
                            return ;
                        }
                        break;
                    case  27 :
                        if (("" == ___uri)&&("materialImage" == ___local)) {
                            context.pushAttributes(__atts);
                            state = 28;
                            return ;
                        }
                        break;
                    case  15 :
                        if (("" == ___uri)&&("colorRed" == ___local)) {
                            context.pushAttributes(__atts);
                            state = 16;
                            return ;
                        }
                        break;
                    case  12 :
                        if (("" == ___uri)&&("matDesc" == ___local)) {
                            context.pushAttributes(__atts);
                            state = 13;
                            return ;
                        }
                        break;
                }
                super.enterElement(___uri, ___local, __atts);
            }

            public void leaveElement(java.lang.String ___uri, java.lang.String ___local)
                throws com.sun.xml.bind.unmarshaller.UnreportedException
            {
                switch (state) {
                    case  33 :
                        revertToParentFromLeaveElement(___uri, ___local);
                        return ;
                    case  8 :
                        if (("" == ___uri)&&("matType" == ___local)) {
                            context.popAttributes();
                            state = 9;
                            return ;
                        }
                        break;
                    case  2 :
                        if (("" == ___uri)&&("itemCode" == ___local)) {
                            context.popAttributes();
                            state = 3;
                            return ;
                        }
                        break;
                    case  29 :
                        if (("" == ___uri)&&("materialImage" == ___local)) {
                            context.popAttributes();
                            state = 30;
                            return ;
                        }
                        break;
                    case  23 :
                        if (("" == ___uri)&&("colorBlue" == ___local)) {
                            context.popAttributes();
                            state = 24;
                            return ;
                        }
                        break;
                    case  32 :
                        if (("" == ___uri)&&("groupID" == ___local)) {
                            context.popAttributes();
                            state = 33;
                            return ;
                        }
                        break;
                    case  11 :
                        if (("" == ___uri)&&("matGroup" == ___local)) {
                            context.popAttributes();
                            state = 12;
                            return ;
                        }
                        break;
                    case  5 :
                        if (("" == ___uri)&&("ownCode" == ___local)) {
                            context.popAttributes();
                            state = 6;
                            return ;
                        }
                        break;
                    case  14 :
                        if (("" == ___uri)&&("matDesc" == ___local)) {
                            context.popAttributes();
                            state = 15;
                            return ;
                        }
                        break;
                    case  26 :
                        if (("" == ___uri)&&("colorAlpha" == ___local)) {
                            context.popAttributes();
                            state = 27;
                            return ;
                        }
                        break;
                    case  20 :
                        if (("" == ___uri)&&("colorGreen" == ___local)) {
                            context.popAttributes();
                            state = 21;
                            return ;
                        }
                        break;
                    case  17 :
                        if (("" == ___uri)&&("colorRed" == ___local)) {
                            context.popAttributes();
                            state = 18;
                            return ;
                        }
                        break;
                }
                super.leaveElement(___uri, ___local);
            }

            public void enterAttribute(java.lang.String ___uri, java.lang.String ___local)
                throws com.sun.xml.bind.unmarshaller.UnreportedException
            {
                switch (state) {
                    case  33 :
                        revertToParentFromEnterAttribute(___uri, ___local);
                        return ;
                }
                super.enterAttribute(___uri, ___local);
            }

            public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local)
                throws com.sun.xml.bind.unmarshaller.UnreportedException
            {
                switch (state) {
                    case  33 :
                        revertToParentFromLeaveAttribute(___uri, ___local);
                        return ;
                }
                super.leaveAttribute(___uri, ___local);
            }

            public void text(java.lang.String value)
                throws com.sun.xml.bind.unmarshaller.UnreportedException
            {
                try {
                    switch (state) {
                        case  4 :
                            try {
                                _OwnCode = value;
                            } catch (java.lang.Exception e) {
                                handleParseConversionException(e);
                            }
                            state = 5;
                            return ;
                        case  33 :
                            revertToParentFromText(value);
                            return ;
                        case  7 :
                            try {
                                _MatType = javax.xml.bind.DatatypeConverter.parseInteger(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                            } catch (java.lang.Exception e) {
                                handleParseConversionException(e);
                            }
                            state = 8;
                            return ;
                        case  10 :
                            try {
                                _MatGroup = value;
                            } catch (java.lang.Exception e) {
                                handleParseConversionException(e);
                            }
                            state = 11;
                            return ;
                        case  22 :
                            try {
                                _ColorBlue = javax.xml.bind.DatatypeConverter.parseInteger(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                            } catch (java.lang.Exception e) {
                                handleParseConversionException(e);
                            }
                            state = 23;
                            return ;
                        case  13 :
                            try {
                                _MatDesc = value;
                            } catch (java.lang.Exception e) {
                                handleParseConversionException(e);
                            }
                            state = 14;
                            return ;
                        case  25 :
                            try {
                                _ColorAlpha = javax.xml.bind.DatatypeConverter.parseInteger(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                            } catch (java.lang.Exception e) {
                                handleParseConversionException(e);
                            }
                            state = 26;
                            return ;
                        case  28 :
                            try {
                                _MaterialImage = com.sun.msv.datatype.xsd.Base64BinaryType.load(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                            } catch (java.lang.Exception e) {
                                handleParseConversionException(e);
                            }
                            state = 29;
                            return ;
                        case  16 :
                            try {
                                _ColorRed = javax.xml.bind.DatatypeConverter.parseInteger(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                            } catch (java.lang.Exception e) {
                                handleParseConversionException(e);
                            }
                            state = 17;
                            return ;
                        case  19 :
                            try {
                                _ColorGreen = javax.xml.bind.DatatypeConverter.parseInteger(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                            } catch (java.lang.Exception e) {
                                handleParseConversionException(e);
                            }
                            state = 20;
                            return ;
                        case  1 :
                            try {
                                _ItemCode = value;
                            } catch (java.lang.Exception e) {
                                handleParseConversionException(e);
                            }
                            state = 2;
                            return ;
                        case  31 :
                            try {
                                _GroupID = javax.xml.bind.DatatypeConverter.parseInteger(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                            } catch (java.lang.Exception e) {
                                handleParseConversionException(e);
                            }
                            state = 32;
                            return ;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
            }

        }

    }

    public class Unmarshaller
        extends com.sun.xml.bind.unmarshaller.ContentHandlerEx
    {


        public Unmarshaller(com.sun.xml.bind.unmarshaller.UnmarshallingContext context) {
            super(context, "---");
        }

        protected com.sun.xml.bind.unmarshaller.UnmarshallableObject owner() {
            return mats.importer.impl.MaterialsImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, org.xml.sax.Attributes __atts)
            throws com.sun.xml.bind.unmarshaller.UnreportedException
        {
            switch (state) {
                case  0 :
                    if (("" == ___uri)&&("material" == ___local)) {
                        context.pushAttributes(__atts);
                        state = 1;
                        return ;
                    }
                    revertToParentFromEnterElement(___uri, ___local, __atts);
                    return ;
                case  1 :
                    if (("" == ___uri)&&("itemCode" == ___local)) {
                        _Material.add(((mats.importer.impl.MaterialsImpl.MaterialTypeImpl) spawnChildFromEnterElement((mats.importer.impl.MaterialsImpl.MaterialTypeImpl.class), 2, ___uri, ___local, __atts)));
                        return ;
                    }
                    break;
            }
            super.enterElement(___uri, ___local, __atts);
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local)
            throws com.sun.xml.bind.unmarshaller.UnreportedException
        {
            switch (state) {
                case  0 :
                    revertToParentFromLeaveElement(___uri, ___local);
                    return ;
                case  2 :
                    if (("" == ___uri)&&("material" == ___local)) {
                        context.popAttributes();
                        state = 0;
                        return ;
                    }
                    break;
            }
            super.leaveElement(___uri, ___local);
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local)
            throws com.sun.xml.bind.unmarshaller.UnreportedException
        {
            switch (state) {
                case  0 :
                    revertToParentFromEnterAttribute(___uri, ___local);
                    return ;
            }
            super.enterAttribute(___uri, ___local);
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local)
            throws com.sun.xml.bind.unmarshaller.UnreportedException
        {
            switch (state) {
                case  0 :
                    revertToParentFromLeaveAttribute(___uri, ___local);
                    return ;
            }
            super.leaveAttribute(___uri, ___local);
        }

        public void text(java.lang.String value)
            throws com.sun.xml.bind.unmarshaller.UnreportedException
        {
            try {
                switch (state) {
                    case  0 :
                        revertToParentFromText(value);
                        return ;
                }
            } catch (java.lang.RuntimeException e) {
                handleUnexpectedTextException(value, e);
            }
        }

        public void leaveChild(int nextState)
            throws com.sun.xml.bind.unmarshaller.UnreportedException
        {
            switch (nextState) {
                case  2 :
                    state = 2;
                    return ;
            }
            super.leaveChild(nextState);
        }

    }

}
